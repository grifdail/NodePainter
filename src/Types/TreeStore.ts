import { NodeDefinition } from "./NodeDefinition";
import { PortDefinition } from "./PortDefinition";
import { PortType } from "./PortType";
import { ExecutionContext } from "../Utils/createExecutionContext";
import { Template } from "../Data/templates";
import { NodeData } from "./NodeData";
import { PortConnection } from "./PortConnection";
import { NodeCollection } from "./NodeCollection";
import { CustomNodeEditingType } from "./CustomFunctionCreationContextStore";

export type TreeStore = {
  nodes: NodeCollection;
  editedGraph?: string;
  customNodes: { [key: string]: NodeDefinition };
  getNodeLibrary: () => { [key: string]: NodeDefinition };
  getNodeTypeDefinition: (type: string | NodeData) => NodeDefinition;
  getNode: (id: string) => NodeData;
  getInputPort: (id: string, portId: string) => PortConnection;
  getOutputPort: (id: string, portId: string) => PortDefinition;
  setNodePosition: (id: string, x: number, y: number) => void;
  addNode: (nodeType: string, posX: number, posY: number) => void;
  addEdge: (sourceId: string, sourcePort: string, targetId: string, targetPort: string) => void;
  getPortValue: (nodeId: string, portId: string, context: ExecutionContext) => [any, PortType];
  removeDataConnection: (node: string, port: string) => void;
  removeOutputConnection: (node: string, port: string) => void;
  setNodeInputValue: (node: string, portId: string, newValue: any) => void;
  setNodeSetting: (node: string, settingId: string, newValue: any) => void;
  resetNode: (node: string) => void;
  deleteNode: (node: string) => void;
  duplicateNode: (node: string) => void;
  reset: () => void;
  loadTemplate: (temp: Template) => void;
  load: (source: NodeCollection) => boolean;
  createFunction: (def: NodeDefinition) => void;
  createShader: (def: NodeDefinition) => void;
  createSimulation: (def: NodeDefinition) => void;
  setEditedGraph: (graph: string | undefined) => void;
  enforceValidGraph: () => void;
  executeCallback: (nodeId: string, fn: (node: NodeData) => void) => void;
  changeNodeType: (id: string, type: PortType) => void;
  getCustomNodeEditingType: () => CustomNodeEditingType;
};
